{
  "nodeModulesDir": "auto",
  "workspace": [
    "./packages/core",
    "./packages/crypto",
    "./packages/crypto-target-node",
    "./packages/crypto-target-web",
    "./packages/client",
    // Could be enabled for DX (i.e. Deno LSP will recognise and help), but Deno will fail at running
    // because of deps in `package.json`. They are specified with `pnpm dlx jsr add ...`, and Deno doesn't handle that.
    "./tests/support/iroha-source",
    "./tests/support/test-configuration",
    "./tests/support/test-peer",
    "./tests/node",
    "./tests/browser"
  ],
  "tasks": {
    "prep:iroha": "deno run --allow-all ./etc/task-prep-iroha.ts",
    "prep:iroha:check": {
      "description": "Ensure that Iroha is linked",
      "command": "deno task prep:iroha --check"
    },
    "prep:iroha:build": {
      "description": "Build Iroha binaries (such as `irohad` or `iroha_codec`) and WASMs (`executor.wasm`)",
      "command": "deno task prep:iroha --build",
      "dependencies": ["prep:iroha:check"]
    },
    "prep:crypto-wasm": "deno run --allow-read --allow-env --allow-run --allow-write ./etc/task-prep-crypto-wasm.ts",
    "prep:ci": {
      "description": "Run all necessary preparations in CI",
      "command": "deno task prep:iroha --git $IROHA_GIT --git-rev $IROHA_GIT_REV && deno task prep:iroha:build && deno task prep:crypto-wasm"
    },
    "check:all": "deno check .",
    "test:vitest": {
      "dependencies": ["prep:iroha:check"],
      "description": "Run Vitest",
      "command": "vitest run"
    },
    "test:integration:node": {
      "dependencies": ["prep:iroha:build"],
      "command": "cd tests/node && deno task test"
    },
    "test:integration:browser": {
      "dependencies": ["prep:iroha:build"],
      "command": "cd tests/browser && deno task test"
    },
    "test": {
      "description": "Run all tests, from unit to integration",
      "command": "deno task test:vitest && deno task test:integration:node && deno task test:integration:browser"
    },
    "dev:run-test-peer": {
      "dependencies": ["prep:iroha:check"],
      // "description": "",
      "command": "cd tests/support/test-peer && deno task run"
    }
  },
  "fmt": {
    "include": ["."],
    "exclude": ["**/*_generated_.ts"],
    "semiColons": false,
    "lineWidth": 120,
    "singleQuote": true
  },
  "lint": {
    "include": ["."],
    "rules": {
      "tags": ["recommended", "jsr"],
      "exclude": ["no-explicit-any", "require-await"]
    }
  },
  "imports": {
    "@deno/vite-plugin": "npm:@deno/vite-plugin@^1.0.3",
    "@std/assert": "jsr:@std/assert@^1.0.11",
    "@std/async": "jsr:@std/async@^1.0.10",
    "@std/encoding": "jsr:@std/encoding@^1.0.7",
    "@std/fmt": "jsr:@std/fmt@^1.0.5",
    "@std/toml": "jsr:@std/toml@^1.0.2",
    "change-case": "npm:change-case@^5.4.4",
    "dprint-node": "npm:dprint-node@^1.0.8",
    "fast-equals": "npm:fast-equals@^5.2.2",
    "get-port": "npm:get-port@^7.1.0",
    "immutable": "npm:immutable@^5.0.3",
    "jake": "npm:jake@^10.9.2",
    "remeda": "npm:remeda@^2.20.1",
    "ts-pattern": "npm:ts-pattern@^5.6.2",
    "type-fest": "npm:type-fest@^4.33.0",
    "vitest": "npm:vitest@^3.0.5",
    "zx": "npm:zx@^8.3.2"
  }
}
